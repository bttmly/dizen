// Generated by CoffeeScript 1.8.0
var NO_COPY, decorate, dizen, flip_decorate, is_nil, noop, registry, use,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

NO_COPY = ["decorator_name", "init", "cleanup"];


/*
decorator_name: String
bind_all: Boolean
init: Function
cleanup: Function
 */

is_nil = function(obj) {
  return obj === null || obj === void 0;
};

noop = function() {};

dizen = function(obj) {};

registry = {};

use = function(dec) {
  if (typeof dec.decorator_name !== "string") {
    throw new Error();
  }
  if (registry[dec.decorator_name]) {
    throw new Error();
  }
};

decorate = function(obj, dec, options) {
  var cleanup, prop;
  if (typeof dec === "string") {
    dec = registry[dec];
  }
  if (is_nil(dec)) {
    throw new Error("Invalid decorator");
  }
  for (prop in dec) {
    if (!__hasProp.call(dec, prop)) continue;
    if (__indexOf.call(NO_COPY, prop) < 0) {
      obj[prop] = dec[prop];
    }
  }
  if (typeof dec.init === "function") {
    dec.init.call(obj, options);
  }
  if (!obj.cleanup) {
    obj.cleanup = noop;
  }
  if (obj.cleanup && dec.cleanup && typeof dec.cleanup === "function") {
    cleanup = obj.cleanup;
    obj.cleanup = function() {
      cleanup();
      return dec.cleanup.call(obj);
    };
  }
  if (is_nil(obj.bedizen)) {
    obj.bedizen = function(dec, options) {
      return decorate(dec, this, options);
    };
  }
  return obj;
};

flip_decorate = function(dec, options, obj) {
  return decorate(dec, obj, options);
};

module.exports = {
  decorate: decorate,
  flip_decorate: flip_decorate,
  use: use
};
